---
title: "Poisson Regression Examples"
author: "Eleanor Amidei"
date: today
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
---
## Blueprinty Case Study

### Introduction

Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available. 

However, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty's software. The marketing team would like to use this data to make the claim that firms using Blueprinty's software are more successful in getting their patent applications approved.


### Data
```{python}
import pandas as pd
import numpy as np

airbnb = pd.read_csv('airbnb.csv')
blueprinty = pd.read_csv('blueprinty.csv')
blueprinty.head()


import matplotlib.pyplot as plt

import seaborn as sns

sns.histplot(data=blueprinty, x='patents', hue='iscustomer', kde=False, bins=30, multiple='dodge')
plt.title('Distribution of Number of Patents by Customer Status')
plt.xlabel('Number of Patents')
plt.ylabel('Count')
plt.show()

blueprinty.groupby('iscustomer')['patents'].mean()

print(blueprinty.groupby('iscustomer')['patents'].mean())

# T-test 
from scipy.stats import ttest_ind

cust = blueprinty[blueprinty['iscustomer'] == 1]['patents']
noncust = blueprinty[blueprinty['iscustomer'] == 0]['patents']

t_stat, p_val = ttest_ind(cust, noncust, equal_var=False)
print(f"T-statistic: {t_stat:.2f}, p-value: {p_val:.4f}")

import statsmodels.formula.api as smf

model = smf.ols('patents ~ iscustomer + age + C(region)', data=blueprinty).fit()
print(model.summary())

```
Test of means:

Blueprinty customers have significantly more patents than non-customers on average (4.13 vs. 3.47), and the difference is statistically significant (p < 0.001). However, this is an unadjusted comparison and may be influenced by other factors like age or region.


1. Customer status is assiociated with more patients: 

iscustomer coefficient = +0.641, p < 0.001

Interpretation: Controlling for age and region, Blueprinty customers have, on average, 0.64 more patents than non-customers.

Statistically significant at the 0.1% level → this relationship is unlikely to be due to chance.

2. Age Has a Negative Effect:

age coefficient = -0.036, p < 0.001

Interpretation: For each additional year of company age, patent count decreases slightly (by 0.036).

This might suggest younger companies are more innovative, or older ones already hold established portfolios.

3. Region Doesn’t Seem to Matter Much
All region coefficients are statistically insignificant (p > 0.05).

No strong evidence that region has a meaningful effect on patent count in this sample.

### Estimation of Simple Poisson Model

Since our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.

_todo: Write down mathematically the likelihood for_ $Y \sim \text{Poisson}(\lambda)$. Note that $f(Y|\lambda) = e^{-\lambda}\lambda^Y/Y!$.

_todo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_

```
poisson_loglikelihood <- function(lambda, Y){
   ...
}
```

_todo: Use your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y)._

_todo: If you're feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which "feels right" because the mean of a Poisson distribution is lambda._

_todo: Find the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python._

```{python}
import numpy as np
from scipy.special import gammaln  
from scipy import optimize
import matplotlib.pyplot as plt

# Log-likelihood function
def poisson_loglikelihood(lmbda, Y):
    if lmbda <= 0:
        return -np.inf  # log-likelihood is undefined for non-positive lambda
    return np.sum(-lmbda + Y * np.log(lmbda) - gammaln(Y + 1))

# Use actual Y values from the blueprinty dataset
Y = blueprinty['patents'].values

# Lambda range for plotting
lambdas = np.linspace(0.1, 20, 200)
logliks = [poisson_loglikelihood(lmbda, Y) for lmbda in lambdas]

plt.figure(figsize=(10, 5))
plt.plot(lambdas, logliks)
plt.title("Poisson Log-Likelihood vs. Lambda")
plt.xlabel("Lambda (λ)")
plt.ylabel("Log-Likelihood")
plt.grid(True)
plt.show()


# We minimize the negative log-likelihood
neg_loglik = lambda lmbda: -poisson_loglikelihood(lmbda, Y)

result = optimize.minimize_scalar(neg_loglik, bounds=(0.01, 50), method='bounded')
lambda_mle = result.x

print(f"MLE for lambda: {lambda_mle:.4f}")
print(f"Sample mean of Y: {np.mean(Y):.4f}")

```

### Estimation of Poisson Regression Model

Next, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i = \text{Poisson}(\lambda_i)$ where $\lambda_i = \exp(X_i'\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.

_todo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that_ $\lambda_i = e^{X_i'\beta}$. _For example:_

```
poisson_regression_likelihood <- function(beta, Y, X){
   ...
}
```

_todo: Use your function along with R's optim() or Python's sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1's to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors._

_todo: Check your results using R's glm() function or Python sm.GLM() function._

_todo: Interpret the results._ 

_todo: What do you conclude about the effect of Blueprinty's software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences._

```{python}
import numpy as np
import pandas as pd
import scipy.special
import scipy.optimize
import statsmodels.api as sm
from statsmodels.genmod.families import Poisson
from scipy import stats

def poisson_loglikelihood(beta, Y, X):
    beta = np.array(beta)
    Y = np.array(Y)
    X = np.array(X)
    
    linear_pred = X.dot(beta)
    
    linear_pred = np.clip(linear_pred, -30, 30)
    
    lambda_i = np.exp(linear_pred)
    
    log_likelihood = np.sum(Y * np.log(lambda_i + 1e-10) - lambda_i - scipy.special.gammaln(Y + 1))
    
    return log_likelihood

def negative_poisson_loglikelihood(beta, Y, X):
    return -poisson_loglikelihood(beta, Y, X)

blueprinty['age_squared'] = blueprinty['age'].astype(float) ** 2
region_dummies = pd.get_dummies(blueprinty['region'], prefix='region', drop_first=True)

X_data = pd.DataFrame()
X_data['age'] = blueprinty['age'].astype(float)
X_data['age_squared'] = blueprinty['age_squared'].astype(float)
X_data['iscustomer'] = blueprinty['iscustomer'].astype(float)

for col in region_dummies.columns:
    X_data[col] = region_dummies[col].astype(float)

X = sm.add_constant(X_data)
Y = blueprinty['patents'].astype(float)

X_array = np.asarray(X)
Y_array = np.asarray(Y)

poisson_model = sm.GLM(Y_array, X_array, family=Poisson())
poisson_results = poisson_model.fit()
initial_beta = poisson_results.params

result = scipy.optimize.minimize(
    negative_poisson_loglikelihood,
    initial_beta,
    args=(Y_array, X_array),
    method='BFGS',
    options={'disp': True}
)

beta_mle = result.x

std_errors = poisson_results.bse

column_names = ['Intercept', 'Age', 'Age²']
region_cols = list(region_dummies.columns)
column_names.extend(region_cols)
column_names.append('Customer')

comparison_df = pd.DataFrame({
    'Manual Coefficient': beta_mle,
    'Statsmodels Coefficient': poisson_results.params,
    'Std. Error': std_errors,
    'z-value': poisson_results.params / std_errors,
    'p-value': 2 * (1 - stats.norm.cdf(np.abs(poisson_results.params / std_errors)))
})
comparison_df.index = column_names[:len(beta_mle)]

print("Poisson Regression Results (Comparison):")
print(comparison_df)

iscustomer_idx = list(X.columns).index('iscustomer')
customer_effect = np.exp(poisson_results.params[iscustomer_idx]) - 1
print(f"\nEffect of being a Blueprinty customer: {customer_effect:.4f}")
print(f"Blueprinty customers are associated with a {customer_effect*100:.2f}% increase in patent count.")

from scipy.optimize import approx_fprime

def hessian(func, x, *args):
    n = len(x)
    h = 1e-5 
    hessy = np.zeros((n, n))
    
    def grad(x, *args):
        return approx_fprime(x, func, h, *args)
    
    for i in range(n):
        x_plus = x.copy()
        x_plus[i] += h
        grad_plus = grad(x_plus, *args)
        
        grad_x = grad(x, *args)
        
        hessy[i] = (grad_plus - grad_x) / h
    
    hessy = (hessy + hessy.T) / 2
    
    return hessy

hessy = hessian(negative_poisson_loglikelihood, beta_mle, Y_array, X_array)

cov_matrix = np.linalg.inv(hessy)
manual_std_errors = np.sqrt(np.diag(cov_matrix))

manual_results_df = pd.DataFrame({
    'Coefficient': beta_mle,
    'Manual Std. Error': manual_std_errors,
    'Statsmodels Std. Error': std_errors,
    'z-value': beta_mle / manual_std_errors,
    'p-value': 2 * (1 - stats.norm.cdf(np.abs(beta_mle / manual_std_errors)))
})
manual_results_df.index = column_names[:len(beta_mle)]

print("\nPoisson Regression Results with MSE:")
print(manual_results_df)
```

## AirBnB Case Study

### Introduction

AirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City.  The data include the following variables:

:::: {.callout-note collapse="true"}
### Variable Definitions

    - `id` = unique ID number for each unit
    - `last_scraped` = date when information scraped
    - `host_since` = date when host first listed the unit on Airbnb
    - `days` = `last_scraped` - `host_since` = number of days the unit has been listed
    - `room_type` = Entire home/apt., Private room, or Shared room
    - `bathrooms` = number of bathrooms
    - `bedrooms` = number of bedrooms
    - `price` = price per night (dollars)
    - `number_of_reviews` = number of reviews for the unit on Airbnb
    - `review_scores_cleanliness` = a cleanliness score from reviews (1-10)
    - `review_scores_location` = a "quality of location" score from reviews (1-10)
    - `review_scores_value` = a "quality of value" score from reviews (1-10)
    - `instant_bookable` = "t" if instantly bookable, "f" if not

::::


_todo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided._

``` {python}



vars_needed = [
    'number_of_reviews', 'days', 'room_type', 'bathrooms', 'bedrooms', 'price',
    'review_scores_cleanliness', 'review_scores_location',
    'review_scores_value', 'instant_bookable'
]

airbnb_clean = airbnb[vars_needed].dropna()


print(airbnb_clean.info())
print(airbnb_clean.describe())

# Convert price to numeric (if it's a string with $ or ,)
airbnb_clean["price"] = (
    airbnb_clean["price"]
    .replace('[\$,]', '', regex=True)
    .astype(float)
)

# Convert 'instant_bookable' to binary
airbnb_clean["instant_bookable"] = airbnb_clean["instant_bookable"].map({"t": 1, "f": 0})


# Distribution of number of reviews
sns.histplot(airbnb_clean["number_of_reviews"], bins=50)
plt.title("Distribution of Number of Reviews")
plt.show()

# Boxplot of reviews by room type
sns.boxplot(x="room_type", y="number_of_reviews", data=airbnb_clean)
plt.title("Number of Reviews by Room Type")
plt.show()

import statsmodels.api as sm
import statsmodels.formula.api as smf

# Fit the model
model = smf.glm(
    formula="""
        number_of_reviews ~ room_type + bathrooms + bedrooms + price +
        review_scores_cleanliness + review_scores_location +
        review_scores_value + instant_bookable
    """,
    data=airbnb_clean,
    family=sm.families.Poisson()
).fit()

print(model.summary())

```

Using the number of reviews as a proxy for bookings, we built a Poisson regression model to examine how listing characteristics relate to booking volume. We found that listings which are instantly bookable receive about 40% more reviews, making this the strongest positive predictor. Higher cleanliness scores also lead to significantly more reviews, with each 1-point increase associated with a 12% gain. Additional bedrooms slightly increase bookings (about 8% per bedroom), while more bathrooms surprisingly reduce them by about 12%. Shared rooms receive 22% fewer reviews than entire homes, and private rooms show no meaningful difference. Price has a negligible effect. Interestingly, higher location and value scores are associated with fewer reviews, which may reflect confounding rather than true negative effects. Overall, features that signal convenience and cleanliness appear to drive more bookings, while room type and size also play meaningful roles